使用说明
一、PDR模块接口

#新增
0.把模型文件放在项目assets资源目录中

1.在Module的build.gradle里添加依赖
	implementation files('路径\\PDRNet-debug.aar')
	implementation 'org.pytorch:pytorch_android:1.8.0'
	#新增
	implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.9'

2.在代码里导入
	import cn.whu.cs.niu.PDR.PDRNetManager

3.声明一个对象PDRNetManager
	private lateinit var manager: PDRNetManager
4.写一个回调函数
	该回调函数的形参为(long[] tims, double[][] positions, double[] grv)
5.调用PDRNetManager.start()函数，开始PDR的计算
	/**
     	* 开始采集PDR，使用回调函数获取时间戳和位置数据
     	* 回调函数中包含三个形参，分别为时间戳数组、坐标数组、手机姿态四元数。
     	* 时间戳数组长度为100，由System.currentTimeMillis()获取。
     	* 位置数据为100×2的double类型数据。以最后一个位置为原点，以最后一个位置的IMU的航向角为X轴的水平坐标系。
     	* 该模块调用了TYPE_GAME_ROTATION_VECTOR、TYPE_ACCELEROMETER、TYPE_GYROSCOPE_UNCALIBRATED三种传感器。
     	* 传感器采样频率为SENSOR_DELAY_FASTEST
     	*
     	* @param context 安卓上下文
     	* @param module PDR网络模型的路径
     	* @param handler 需要的回调函数
     	*/
	fun start(
        	context: Context,
        	module: String = "mobile_model.ptl",
        	handler: (times: LongArray, locations: Array<DoubleArray>，grv: DoubleArray) -> Unit
    	)

6.通过回调函数获得locations和grv后，若不进行坐标系旋转，则直接取locations数组最新位置即可
    val location_x = locations[99][0].toFloat()
    val location_y = locations[99][1].toFloat()
7.如果需要进行坐标系旋转，使得前进的方向永远是轴正向、且当前用户位置为（0,0）点。
  则使用CoordinateTool.updateCoordinate函数来旋转坐标系，但此时每次产生一个新的定位x,y，
  都会对整个locations数组的所有坐标进行旋转、重新绘制轨迹，时间成本较高！
	//直接对locations进行处理，没有返回值
	 CoordinateTool.updateCoordinate(grv, locations)

8.调用PDRNetManager.stop()函数，停止PDR
	manager.stop()

二、坐标转换工具接口
1.在代码里导入
	import cn.whu.cs.niu.PDR.CoordinateTool
2.调用CoordinateTool静态方法
	/**
     	* 坐标更新函数。
     	* 用grv计算出旋转角度，以positions最后一个点为原点进行平移旋转。
     	* 使得前进的方向永远是轴正向、且当前用户位置为（0,0）点。
     	* 该函数直接对positions进行更新，不返回数据。
     	*
     	* @param grv 旋转向量[x, y, z, w]
     	* @param positions [100 * 2]坐标点
     	*/
	CoordinateTool.updateCoordinate(double[] grv, double[][] positions)
	
